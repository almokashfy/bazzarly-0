name: 🚀 Deploy Full Stack to Cloud Run

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Manual trigger

env:
  PROJECT_ID: store-thullah
  REGION: us-central1
  FRONTEND_SERVICE: bazzarly-frontend
  BACKEND_SERVICE: bazzarly-backend

jobs:
  deploy:
    name: 🚀 Deploy to Cloud Run
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: ⚙️ Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: 🐳 Configure Docker to use gcloud
      run: gcloud auth configure-docker

    - name: 🔧 Enable required APIs
      run: |
        gcloud services enable cloudbuild.googleapis.com
        gcloud services enable run.googleapis.com
        gcloud services enable containerregistry.googleapis.com

    # Backend Deployment
    - name: 🔨 Build Backend Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$BACKEND_SERVICE:$GITHUB_SHA \
          -f backend/Dockerfile backend/

    - name: 📤 Push Backend image
      run: docker push gcr.io/$PROJECT_ID/$BACKEND_SERVICE:$GITHUB_SHA

    - name: 🚀 Deploy Backend to Cloud Run
      run: |
        gcloud run deploy $BACKEND_SERVICE \
          --image gcr.io/$PROJECT_ID/$BACKEND_SERVICE:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --port 8080 \
          --set-env-vars NODE_ENV=production

    - name: 🌐 Get Backend URL
      id: backend-url
      run: |
        BACKEND_URL=$(gcloud run services describe $BACKEND_SERVICE --region=$REGION --format='value(status.url)')
        echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
        echo "Backend URL: $BACKEND_URL"

    # Frontend Deployment
    - name: 📝 Create Frontend .env.production
      run: |
        echo "REACT_APP_API_URL=${{ steps.backend-url.outputs.url }}" > frontend/.env.production
        echo "REACT_APP_ENVIRONMENT=production" >> frontend/.env.production

    - name: 🔨 Build Frontend Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:$GITHUB_SHA \
          -f frontend/Dockerfile frontend/

    - name: 📤 Push Frontend image
      run: docker push gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:$GITHUB_SHA

    - name: 🚀 Deploy Frontend to Cloud Run
      run: |
        gcloud run deploy $FRONTEND_SERVICE \
          --image gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --port 80

    - name: 🌐 Get Frontend URL
      id: frontend-url
      run: |
        FRONTEND_URL=$(gcloud run services describe $FRONTEND_SERVICE --region=$REGION --format='value(status.url)')
        echo "url=$FRONTEND_URL" >> $GITHUB_OUTPUT
        echo "Frontend URL: $FRONTEND_URL"

    # Summary
    - name: ✅ Deployment Summary
      run: |
        echo "🎉 Deployment Complete!"
        echo "📱 Frontend: ${{ steps.frontend-url.outputs.url }}"
        echo "🔧 Backend:  ${{ steps.backend-url.outputs.url }}"
        echo "🕒 Deployed at: $(date)"

    # Test Deployment
    - name: 🧪 Test Deployment
      run: |
        echo "Testing Backend Health..."
        curl -f ${{ steps.backend-url.outputs.url }}/api/health || echo "Backend health check failed"
        
        echo "Testing Frontend..."
        curl -f ${{ steps.frontend-url.outputs.url }} || echo "Frontend check failed" 