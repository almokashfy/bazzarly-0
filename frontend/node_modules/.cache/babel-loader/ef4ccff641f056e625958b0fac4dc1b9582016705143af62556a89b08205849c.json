{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from 'react';\nimport config from '../config/config';\n\n// Validation rules\nexport const validators = {\n  required: (value, message = 'This field is required') => {\n    if (value === null || value === undefined || value === '') {\n      return message;\n    }\n    return null;\n  },\n  email: (value, message = 'Please enter a valid email address') => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (value && !emailRegex.test(value)) {\n      return message;\n    }\n    return null;\n  },\n  minLength: (min, message) => value => {\n    if (value && value.length < min) {\n      return message || `Must be at least ${min} characters long`;\n    }\n    return null;\n  },\n  maxLength: (max, message) => value => {\n    if (value && value.length > max) {\n      return message || `Must be no more than ${max} characters long`;\n    }\n    return null;\n  },\n  pattern: (regex, message = 'Invalid format') => value => {\n    if (value && !regex.test(value)) {\n      return message;\n    }\n    return null;\n  },\n  numeric: (value, message = 'Must be a number') => {\n    if (value && isNaN(Number(value))) {\n      return message;\n    }\n    return null;\n  },\n  price: (value, message = 'Please enter a valid price') => {\n    const num = Number(value);\n    if (value && (isNaN(num) || num < config.VALIDATION.MIN_PRICE || num > config.VALIDATION.MAX_PRICE)) {\n      return message;\n    }\n    return null;\n  },\n  url: (value, message = 'Please enter a valid URL') => {\n    try {\n      if (value) {\n        new URL(value);\n      }\n      return null;\n    } catch {\n      return message;\n    }\n  },\n  phone: (value, message = 'Please enter a valid phone number') => {\n    const phoneRegex = /^[\\+]?[1-9][\\d]{0,15}$/;\n    if (value && !phoneRegex.test(value.replace(/\\s/g, ''))) {\n      return message;\n    }\n    return null;\n  },\n  zipCode: (value, message = 'Please enter a valid ZIP code') => {\n    const zipRegex = /^\\d{5}(-\\d{4})?$/;\n    if (value && !zipRegex.test(value)) {\n      return message;\n    }\n    return null;\n  },\n  match: (matchField, message) => (value, formData) => {\n    if (value && formData[matchField] && value !== formData[matchField]) {\n      return message || `Must match ${matchField}`;\n    }\n    return null;\n  }\n};\n\n// Form validation schemas\nexport const validationSchemas = {\n  product: {\n    title: [validators.required(), validators.minLength(config.VALIDATION.MIN_TITLE_LENGTH), validators.maxLength(config.VALIDATION.MAX_TITLE_LENGTH)],\n    description: [validators.required(), validators.minLength(config.VALIDATION.MIN_DESCRIPTION_LENGTH), validators.maxLength(config.VALIDATION.MAX_DESCRIPTION_LENGTH)],\n    price: [validators.required(), validators.price()],\n    location: [validators.required()],\n    condition: [validators.required()],\n    categoryId: [validators.required()]\n  },\n  contact: {\n    name: [validators.required(), validators.minLength(2), validators.maxLength(50)],\n    email: [validators.required(), validators.email()],\n    message: [validators.required(), validators.minLength(10), validators.maxLength(1000)]\n  },\n  search: {\n    query: [validators.minLength(2, 'Search term must be at least 2 characters'), validators.maxLength(100, 'Search term is too long')]\n  },\n  user: {\n    email: [validators.required(), validators.email()],\n    password: [validators.required(), validators.minLength(8, 'Password must be at least 8 characters'), validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/, 'Password must contain at least one uppercase letter, one lowercase letter, and one number')],\n    confirmPassword: [validators.required(), validators.match('password', 'Passwords do not match')],\n    firstName: [validators.required(), validators.minLength(2), validators.maxLength(30)],\n    lastName: [validators.required(), validators.minLength(2), validators.maxLength(30)],\n    phone: [validators.phone()]\n  }\n};\n\n// Validate a single field\nexport const validateField = (value, validationRules, formData = {}) => {\n  if (!validationRules || !Array.isArray(validationRules)) {\n    return null;\n  }\n  for (const rule of validationRules) {\n    const error = rule(value, formData);\n    if (error) {\n      return error;\n    }\n  }\n  return null;\n};\n\n// Validate entire form\nexport const validateForm = (formData, schema) => {\n  const errors = {};\n  let hasErrors = false;\n  Object.keys(schema).forEach(field => {\n    const error = validateField(formData[field], schema[field], formData);\n    if (error) {\n      errors[field] = error;\n      hasErrors = true;\n    }\n  });\n  return {\n    errors,\n    isValid: !hasErrors\n  };\n};\n\n// Real-time validation hook\nexport const useFormValidation = (initialData = {}, schema = {}) => {\n  _s();\n  const [data, setData] = React.useState(initialData);\n  const [errors, setErrors] = React.useState({});\n  const [touched, setTouched] = React.useState({});\n  const validateField = React.useCallback((field, value) => {\n    const fieldRules = schema[field];\n    if (!fieldRules) return null;\n    return validateField(value, fieldRules, data);\n  }, [schema, data]);\n  const handleChange = React.useCallback((field, value) => {\n    setData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n\n    // Validate if field has been touched\n    if (touched[field]) {\n      const error = validateField(field, value);\n      setErrors(prev => ({\n        ...prev,\n        [field]: error\n      }));\n    }\n  }, [touched, validateField]);\n  const handleBlur = React.useCallback(field => {\n    setTouched(prev => ({\n      ...prev,\n      [field]: true\n    }));\n    const error = validateField(field, data[field]);\n    setErrors(prev => ({\n      ...prev,\n      [field]: error\n    }));\n  }, [data, validateField]);\n  const validateAll = React.useCallback(() => {\n    const {\n      errors: allErrors,\n      isValid\n    } = validateForm(data, schema);\n    setErrors(allErrors);\n    setTouched(Object.keys(schema).reduce((acc, field) => {\n      acc[field] = true;\n      return acc;\n    }, {}));\n    return isValid;\n  }, [data, schema]);\n  const reset = React.useCallback((newData = initialData) => {\n    setData(newData);\n    setErrors({});\n    setTouched({});\n  }, [initialData]);\n  const isValid = React.useMemo(() => {\n    return Object.values(errors).every(error => !error);\n  }, [errors]);\n  return {\n    data,\n    errors,\n    touched,\n    isValid,\n    handleChange,\n    handleBlur,\n    validateAll,\n    reset,\n    setData\n  };\n};\n\n// Sanitization functions\n_s(useFormValidation, \"AeKsGvZqWqDrAVD95jBcFYiHDXo=\");\nexport const sanitize = {\n  string: value => {\n    if (typeof value !== 'string') return '';\n    return value.trim().replace(/[<>]/g, '');\n  },\n  number: value => {\n    const num = Number(value);\n    return isNaN(num) ? 0 : num;\n  },\n  price: value => {\n    const num = Number(value);\n    if (isNaN(num)) return 0;\n    return Math.max(0, Math.min(num, config.VALIDATION.MAX_PRICE));\n  },\n  email: value => {\n    if (typeof value !== 'string') return '';\n    return value.trim().toLowerCase();\n  },\n  url: value => {\n    if (typeof value !== 'string') return '';\n    const trimmed = value.trim();\n    if (trimmed && !trimmed.startsWith('http')) {\n      return `https://${trimmed}`;\n    }\n    return trimmed;\n  },\n  phone: value => {\n    if (typeof value !== 'string') return '';\n    return value.replace(/[^\\d\\+\\-\\s\\(\\)]/g, '');\n  }\n};\n\n// Form helpers\nexport const createFormHandler = (schema, onSubmit) => {\n  return formData => {\n    const {\n      errors,\n      isValid\n    } = validateForm(formData, schema);\n    if (isValid) {\n      // Sanitize data before submission\n      const sanitizedData = Object.keys(formData).reduce((acc, key) => {\n        const value = formData[key];\n\n        // Apply appropriate sanitization based on field type\n        if (key.includes('email')) {\n          acc[key] = sanitize.email(value);\n        } else if (key.includes('price') || key.includes('amount')) {\n          acc[key] = sanitize.price(value);\n        } else if (key.includes('url') || key.includes('website')) {\n          acc[key] = sanitize.url(value);\n        } else if (key.includes('phone')) {\n          acc[key] = sanitize.phone(value);\n        } else if (typeof value === 'string') {\n          acc[key] = sanitize.string(value);\n        } else {\n          acc[key] = value;\n        }\n        return acc;\n      }, {});\n      return onSubmit(sanitizedData);\n    }\n    return Promise.reject({\n      errors,\n      message: 'Validation failed'\n    });\n  };\n};\nexport default {\n  validators,\n  validationSchemas,\n  validateField,\n  validateForm,\n  sanitize,\n  createFormHandler\n};","map":{"version":3,"names":["React","config","validators","required","value","message","undefined","email","emailRegex","test","minLength","min","length","maxLength","max","pattern","regex","numeric","isNaN","Number","price","num","VALIDATION","MIN_PRICE","MAX_PRICE","url","URL","phone","phoneRegex","replace","zipCode","zipRegex","match","matchField","formData","validationSchemas","product","title","MIN_TITLE_LENGTH","MAX_TITLE_LENGTH","description","MIN_DESCRIPTION_LENGTH","MAX_DESCRIPTION_LENGTH","location","condition","categoryId","contact","name","search","query","user","password","confirmPassword","firstName","lastName","validateField","validationRules","Array","isArray","rule","error","validateForm","schema","errors","hasErrors","Object","keys","forEach","field","isValid","useFormValidation","initialData","_s","data","setData","useState","setErrors","touched","setTouched","useCallback","fieldRules","handleChange","prev","handleBlur","validateAll","allErrors","reduce","acc","reset","newData","useMemo","values","every","sanitize","string","trim","number","Math","toLowerCase","trimmed","startsWith","createFormHandler","onSubmit","sanitizedData","key","includes","Promise","reject"],"sources":["C:/Users/hossa/Documents/app/Store/bazzarly 0/frontend/src/utils/validation.js"],"sourcesContent":["import React from 'react';\r\nimport config from '../config/config';\r\n\r\n// Validation rules\r\nexport const validators = {\r\n  required: (value, message = 'This field is required') => {\r\n    if (value === null || value === undefined || value === '') {\r\n      return message;\r\n    }\r\n    return null;\r\n  },\r\n\r\n  email: (value, message = 'Please enter a valid email address') => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (value && !emailRegex.test(value)) {\r\n      return message;\r\n    }\r\n    return null;\r\n  },\r\n\r\n  minLength: (min, message) => (value) => {\r\n    if (value && value.length < min) {\r\n      return message || `Must be at least ${min} characters long`;\r\n    }\r\n    return null;\r\n  },\r\n\r\n  maxLength: (max, message) => (value) => {\r\n    if (value && value.length > max) {\r\n      return message || `Must be no more than ${max} characters long`;\r\n    }\r\n    return null;\r\n  },\r\n\r\n  pattern: (regex, message = 'Invalid format') => (value) => {\r\n    if (value && !regex.test(value)) {\r\n      return message;\r\n    }\r\n    return null;\r\n  },\r\n\r\n  numeric: (value, message = 'Must be a number') => {\r\n    if (value && isNaN(Number(value))) {\r\n      return message;\r\n    }\r\n    return null;\r\n  },\r\n\r\n  price: (value, message = 'Please enter a valid price') => {\r\n    const num = Number(value);\r\n    if (value && (isNaN(num) || num < config.VALIDATION.MIN_PRICE || num > config.VALIDATION.MAX_PRICE)) {\r\n      return message;\r\n    }\r\n    return null;\r\n  },\r\n\r\n  url: (value, message = 'Please enter a valid URL') => {\r\n    try {\r\n      if (value) {\r\n        new URL(value);\r\n      }\r\n      return null;\r\n    } catch {\r\n      return message;\r\n    }\r\n  },\r\n\r\n  phone: (value, message = 'Please enter a valid phone number') => {\r\n    const phoneRegex = /^[\\+]?[1-9][\\d]{0,15}$/;\r\n    if (value && !phoneRegex.test(value.replace(/\\s/g, ''))) {\r\n      return message;\r\n    }\r\n    return null;\r\n  },\r\n\r\n  zipCode: (value, message = 'Please enter a valid ZIP code') => {\r\n    const zipRegex = /^\\d{5}(-\\d{4})?$/;\r\n    if (value && !zipRegex.test(value)) {\r\n      return message;\r\n    }\r\n    return null;\r\n  },\r\n\r\n  match: (matchField, message) => (value, formData) => {\r\n    if (value && formData[matchField] && value !== formData[matchField]) {\r\n      return message || `Must match ${matchField}`;\r\n    }\r\n    return null;\r\n  },\r\n};\r\n\r\n// Form validation schemas\r\nexport const validationSchemas = {\r\n  product: {\r\n    title: [\r\n      validators.required(),\r\n      validators.minLength(config.VALIDATION.MIN_TITLE_LENGTH),\r\n      validators.maxLength(config.VALIDATION.MAX_TITLE_LENGTH),\r\n    ],\r\n    description: [\r\n      validators.required(),\r\n      validators.minLength(config.VALIDATION.MIN_DESCRIPTION_LENGTH),\r\n      validators.maxLength(config.VALIDATION.MAX_DESCRIPTION_LENGTH),\r\n    ],\r\n    price: [\r\n      validators.required(),\r\n      validators.price(),\r\n    ],\r\n    location: [\r\n      validators.required(),\r\n    ],\r\n    condition: [\r\n      validators.required(),\r\n    ],\r\n    categoryId: [\r\n      validators.required(),\r\n    ],\r\n  },\r\n\r\n  contact: {\r\n    name: [\r\n      validators.required(),\r\n      validators.minLength(2),\r\n      validators.maxLength(50),\r\n    ],\r\n    email: [\r\n      validators.required(),\r\n      validators.email(),\r\n    ],\r\n    message: [\r\n      validators.required(),\r\n      validators.minLength(10),\r\n      validators.maxLength(1000),\r\n    ],\r\n  },\r\n\r\n  search: {\r\n    query: [\r\n      validators.minLength(2, 'Search term must be at least 2 characters'),\r\n      validators.maxLength(100, 'Search term is too long'),\r\n    ],\r\n  },\r\n\r\n  user: {\r\n    email: [\r\n      validators.required(),\r\n      validators.email(),\r\n    ],\r\n    password: [\r\n      validators.required(),\r\n      validators.minLength(8, 'Password must be at least 8 characters'),\r\n      validators.pattern(\r\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\r\n        'Password must contain at least one uppercase letter, one lowercase letter, and one number'\r\n      ),\r\n    ],\r\n    confirmPassword: [\r\n      validators.required(),\r\n      validators.match('password', 'Passwords do not match'),\r\n    ],\r\n    firstName: [\r\n      validators.required(),\r\n      validators.minLength(2),\r\n      validators.maxLength(30),\r\n    ],\r\n    lastName: [\r\n      validators.required(),\r\n      validators.minLength(2),\r\n      validators.maxLength(30),\r\n    ],\r\n    phone: [\r\n      validators.phone(),\r\n    ],\r\n  },\r\n};\r\n\r\n// Validate a single field\r\nexport const validateField = (value, validationRules, formData = {}) => {\r\n  if (!validationRules || !Array.isArray(validationRules)) {\r\n    return null;\r\n  }\r\n\r\n  for (const rule of validationRules) {\r\n    const error = rule(value, formData);\r\n    if (error) {\r\n      return error;\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n// Validate entire form\r\nexport const validateForm = (formData, schema) => {\r\n  const errors = {};\r\n  let hasErrors = false;\r\n\r\n  Object.keys(schema).forEach(field => {\r\n    const error = validateField(formData[field], schema[field], formData);\r\n    if (error) {\r\n      errors[field] = error;\r\n      hasErrors = true;\r\n    }\r\n  });\r\n\r\n  return { errors, isValid: !hasErrors };\r\n};\r\n\r\n// Real-time validation hook\r\nexport const useFormValidation = (initialData = {}, schema = {}) => {\r\n  const [data, setData] = React.useState(initialData);\r\n  const [errors, setErrors] = React.useState({});\r\n  const [touched, setTouched] = React.useState({});\r\n\r\n  const validateField = React.useCallback((field, value) => {\r\n    const fieldRules = schema[field];\r\n    if (!fieldRules) return null;\r\n\r\n    return validateField(value, fieldRules, data);\r\n  }, [schema, data]);\r\n\r\n  const handleChange = React.useCallback((field, value) => {\r\n    setData(prev => ({ ...prev, [field]: value }));\r\n\r\n    // Validate if field has been touched\r\n    if (touched[field]) {\r\n      const error = validateField(field, value);\r\n      setErrors(prev => ({\r\n        ...prev,\r\n        [field]: error,\r\n      }));\r\n    }\r\n  }, [touched, validateField]);\r\n\r\n  const handleBlur = React.useCallback((field) => {\r\n    setTouched(prev => ({ ...prev, [field]: true }));\r\n    \r\n    const error = validateField(field, data[field]);\r\n    setErrors(prev => ({\r\n      ...prev,\r\n      [field]: error,\r\n    }));\r\n  }, [data, validateField]);\r\n\r\n  const validateAll = React.useCallback(() => {\r\n    const { errors: allErrors, isValid } = validateForm(data, schema);\r\n    setErrors(allErrors);\r\n    setTouched(\r\n      Object.keys(schema).reduce((acc, field) => {\r\n        acc[field] = true;\r\n        return acc;\r\n      }, {})\r\n    );\r\n    return isValid;\r\n  }, [data, schema]);\r\n\r\n  const reset = React.useCallback((newData = initialData) => {\r\n    setData(newData);\r\n    setErrors({});\r\n    setTouched({});\r\n  }, [initialData]);\r\n\r\n  const isValid = React.useMemo(() => {\r\n    return Object.values(errors).every(error => !error);\r\n  }, [errors]);\r\n\r\n  return {\r\n    data,\r\n    errors,\r\n    touched,\r\n    isValid,\r\n    handleChange,\r\n    handleBlur,\r\n    validateAll,\r\n    reset,\r\n    setData,\r\n  };\r\n};\r\n\r\n// Sanitization functions\r\nexport const sanitize = {\r\n  string: (value) => {\r\n    if (typeof value !== 'string') return '';\r\n    return value.trim().replace(/[<>]/g, '');\r\n  },\r\n\r\n  number: (value) => {\r\n    const num = Number(value);\r\n    return isNaN(num) ? 0 : num;\r\n  },\r\n\r\n  price: (value) => {\r\n    const num = Number(value);\r\n    if (isNaN(num)) return 0;\r\n    return Math.max(0, Math.min(num, config.VALIDATION.MAX_PRICE));\r\n  },\r\n\r\n  email: (value) => {\r\n    if (typeof value !== 'string') return '';\r\n    return value.trim().toLowerCase();\r\n  },\r\n\r\n  url: (value) => {\r\n    if (typeof value !== 'string') return '';\r\n    const trimmed = value.trim();\r\n    if (trimmed && !trimmed.startsWith('http')) {\r\n      return `https://${trimmed}`;\r\n    }\r\n    return trimmed;\r\n  },\r\n\r\n  phone: (value) => {\r\n    if (typeof value !== 'string') return '';\r\n    return value.replace(/[^\\d\\+\\-\\s\\(\\)]/g, '');\r\n  },\r\n};\r\n\r\n// Form helpers\r\nexport const createFormHandler = (schema, onSubmit) => {\r\n  return (formData) => {\r\n    const { errors, isValid } = validateForm(formData, schema);\r\n    \r\n    if (isValid) {\r\n      // Sanitize data before submission\r\n      const sanitizedData = Object.keys(formData).reduce((acc, key) => {\r\n        const value = formData[key];\r\n        \r\n        // Apply appropriate sanitization based on field type\r\n        if (key.includes('email')) {\r\n          acc[key] = sanitize.email(value);\r\n        } else if (key.includes('price') || key.includes('amount')) {\r\n          acc[key] = sanitize.price(value);\r\n        } else if (key.includes('url') || key.includes('website')) {\r\n          acc[key] = sanitize.url(value);\r\n        } else if (key.includes('phone')) {\r\n          acc[key] = sanitize.phone(value);\r\n        } else if (typeof value === 'string') {\r\n          acc[key] = sanitize.string(value);\r\n        } else {\r\n          acc[key] = value;\r\n        }\r\n        \r\n        return acc;\r\n      }, {});\r\n      \r\n      return onSubmit(sanitizedData);\r\n    }\r\n    \r\n    return Promise.reject({ errors, message: 'Validation failed' });\r\n  };\r\n};\r\n\r\nexport default {\r\n  validators,\r\n  validationSchemas,\r\n  validateField,\r\n  validateForm,\r\n  sanitize,\r\n  createFormHandler,\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}